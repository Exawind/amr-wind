#ifndef FIELDUTILS_H
#define FIELDUTILS_H

#include "amr-wind/core/FieldDescTypes.H"
#include "AMReX_MultiFab.H"
#include "AMReX_Interpolater.H"

namespace amr_wind {
namespace field_impl {

/** Convert amr_wind::FieldLoc to index type for use with AMReX objects.
 */
inline amrex::IndexType index_type(const FieldLoc floc)
{
    switch (floc) {
    case FieldLoc::CELL:
        return amrex::IndexType::TheCellType();

    case FieldLoc::NODE:
        return amrex::IndexType::TheNodeType();

    case FieldLoc::XFACE:
        return amrex::IndexType(amrex::IntVect::TheDimensionVector(0));

    case FieldLoc::YFACE:
        return amrex::IndexType(amrex::IntVect::TheDimensionVector(1));

    case FieldLoc::ZFACE:
        return amrex::IndexType(amrex::IntVect::TheDimensionVector(2));
    }

    // Suppress warnings when compiling with CUDA
    return amrex::IndexType::TheCellType();
}

/** Given a base field name and a state, return a unique string that identifies
 *  this state in the field repository.
 */
inline std::string
field_name_with_state(const std::string& fname, const FieldState fstate)
{
    switch (fstate) {
    case FieldState::NP1:
        return fname;

    case FieldState::N:
        return fname + "__FS_Old";

    case FieldState::NM1:
        return fname + "__FS_NM1";

    case FieldState::NPH:
        return fname + "__FS_NPH";

    case FieldState::NMH:
        return fname + "__FS_NMH";
    }

    // Suppress warnings when compiling with CUDA
    return fname;
}

/** Check if the field is not a reserved field name
 *
 *  In amr_wind::FieldRepo, field with states are stored using suffixes that
 *  create a unique string to identify different states. This function checks if
 *  the user specified field name matches any of those reserved suffixes.
 *
 *. \return True if the field is not a reserved field name
 */
inline bool is_valid_field_name(const std::string& name)
{
    // Else make sure that our guard is not in the last 8 characters
    auto found = name.rfind("__FS_");
    if (found != std::string::npos) return false;

    return true;
}

/** Return an AMReX coarse-to-fine field interpolation object based on
 *  amr_wind::FieldInterpolator
 */
inline amrex::Interpolater*
get_interpolation_operator(const FieldInterpolator itype)
{
    switch (itype) {
    case FieldInterpolator::PiecewiseConstant:
        return &amrex::pc_interp;

    case FieldInterpolator::CellConsLinear:
        return &amrex::cell_cons_interp;

    case FieldInterpolator::NodeBilinear:
        return &amrex::node_bilinear_interp;
    }

    return &amrex::cell_cons_interp;
}

inline FieldState dof_state(const FieldState fstate)
{
    return (fstate == FieldState::New) ? FieldState::New : FieldState::Old;
}

inline FieldState phi_state(const FieldState fstate)
{
    return (fstate == FieldState::Old) ? FieldState::Old : FieldState::NPH;
}

} // namespace field_impl
} // namespace amr_wind

#endif /* FIELDUTILS_H */
