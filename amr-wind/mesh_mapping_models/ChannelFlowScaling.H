#ifndef CHANNELFLOWSCALING_H
#define CHANNELFLOWSCALING_H

#include "amr-wind/core/MeshMap.H"
#include "amr-wind/core/Field.H"

namespace amr_wind {
namespace channel_map {

/** Channel flow scaling mesh map
 *  \ingroup mesh_map
 */
class ChannelFlowScaling : public MeshMap::Register<ChannelFlowScaling>
{
public:
    static const std::string identifier() { return "ChannelFlowScaling"; }

    explicit ChannelFlowScaling(const CFDSim& sim);

    virtual ~ChannelFlowScaling() = default;

    //! Construct the mesh scaling field
    void create_map(int, const amrex::Geometry&) override;

private:
    Field& m_mesh_scale_fac_cc;
    Field& m_mesh_scale_fac_nd;
    Field& m_mesh_scale_fac_xf;
    Field& m_mesh_scale_fac_yf;
    Field& m_mesh_scale_fac_zf;
    Field& m_non_uniform_coord_cc;
    Field& m_non_uniform_coord_nd;

    //! User input parameters
    amrex::Vector<amrex::Real> m_beta{{0.0, 3.0, 0.0}};
    amrex::Vector<int> m_map{{0, 1, 0}};

    amrex::Real m_eps{1e-11};

    //! Construct mesh scaling field on cell centers and nodes
    void create_cell_node_map(int, const amrex::Geometry&) override;

    //! Construct mesh scaling field on cell faces
    void create_face_map(int, const amrex::Geometry&) override;

    //! Construct the non-uniform mesh field
    void create_non_uniform_mesh(int, const amrex::Geometry&) override;
};

} // namespace channel_map
} // namespace amr_wind

#endif /* CHANNELFLOWSCALING_H */
