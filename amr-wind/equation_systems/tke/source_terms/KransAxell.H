#ifndef KRANSAXELL_H
#define KRANSAXELL_H

#include "amr-wind/transport_models/TransportModel.H"
#include "amr-wind/equation_systems/tke/TKESource.H"

namespace amr_wind::pde::tke {

/** TKE source term based on Axell 2011 paper
 * Axell, L. B., & Liungman, O. (2001). A one-equation turbulence model for
 * geophysical applications: comparison with data and the k− ε model.
 * Environmental Fluid Mechanics, 1, 71-106.
 *  \ingroup tke_src turb_model we_abl
 */
class KransAxell : public TKESource::Register<KransAxell>
{
public:
    static std::string identifier() { return "KransAxell"; }

    explicit KransAxell(const CFDSim& /*sim*/);

    ~KransAxell() override;

    void operator()(
        const int lev,
        const amrex::MFIter& mfi,
        const amrex::Box& bx,
        const FieldState fstate,
        const amrex::Array4<amrex::Real>& src_term) const override;

private:
    Field& m_turb_lscale;
    Field& m_shear_prod;
    Field& m_buoy_prod;
    Field& m_dissip;
    Field& m_tke;
    amrex::Real m_Cmu{0.556};
    amrex::Real m_heat_flux{0.0};
    amrex::Real m_z0{0.1};
    amrex::Real m_kappa{0.41};
    amrex::Real m_meso_start{600};
    amrex::Vector<amrex::Real> m_gravity{0.0, 0.0, -9.81};
    const SimTime& m_time;
    const CFDSim& m_sim;
    const amrex::AmrCore& m_mesh;
    const Field& m_velocity;
    std::string m_1d_rans;
    amrex::Vector<amrex::Real> m_wind_heights;
    amrex::Vector<amrex::Real> m_tke_values;
    amrex::Gpu::DeviceVector<amrex::Real> m_wind_heights_d;
    amrex::Gpu::DeviceVector<amrex::Real> m_tke_values_d;
    //! Transport model
    const transport::TransportModel& m_transport;

    //! Reference temperature
    std::unique_ptr<ScratchField> m_ref_theta;
    bool m_horizontal_sponge{false};
    amrex::Real m_sponge_strength{1.0};
    amrex::Real m_sponge_distance_west{-1000};
    amrex::Real m_sponge_distance_east{1000};
    amrex::Real m_sponge_distance_south{-1000};
    amrex::Real m_sponge_distance_north{1000};
    int m_sponge_west{0};
    int m_sponge_east{1};
    int m_sponge_south{0};
    int m_sponge_north{1};
    std::string m_wall_het_model{"none"};
    amrex::Real m_mol_length{10000};
    amrex::Real m_gamma_m{5.0};
    amrex::Real m_beta_m{16.0};

    static amrex::Real stability(
        const amrex::Real z,
        const amrex::Real mol_length,
        const amrex::Real gamma_m,
        const amrex::Real beta_m)
    {
        const amrex::Real zeta = z / mol_length;
        amrex::Real psi_m = 0;
        if (zeta > 0) {
            psi_m = -gamma_m * zeta;
        } else {
            amrex::Real x = std::sqrt(std::sqrt(1 - beta_m * zeta));
            psi_m = 2.0 * std::log(0.5 * (1.0 + x)) + log(0.5 * (1 + x * x)) -
                    2.0 * std::atan(x) + 2.0 * std::atan(1.0);
        }
        return psi_m;
    }
};

} // namespace amr_wind::pde::tke

#endif /* KRANSAXELL_H */
