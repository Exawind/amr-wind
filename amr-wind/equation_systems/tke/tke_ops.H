#ifndef TKE_OPS_H
#define TKE_OPS_H

#include "amr-wind/equation_systems/tke/TKE.H"
#include "amr-wind/core/field_ops.H"

namespace amr_wind {
namespace pde {

/** Implementation of Turbulence operator for TKE equation
 *  \ingroup tke_eqn
 */
template <>
struct TurbulenceOp<TKE>
{
    TurbulenceOp(turbulence::TurbulenceModel& tmodel, PDEFields& fields)
        : m_tmodel(tmodel), m_fields(fields)
    {}

    void operator()()
    {
        auto& mueff = m_fields.mueff;
        m_tmodel.update_scalar_diff(mueff, TKE::var_name());
    }

    turbulence::TurbulenceModel& m_tmodel;
    PDEFields& m_fields;
};

/** Implementation of post-processing actions for TKE equation
 *  \ingroup tke_eqn
 */
template <>
struct PostSolveOp<TKE>
{
    PostSolveOp(CFDSim&, PDEFields& fields) : m_fields(fields) {}

    void operator()(const amrex::Real time)
    {
        auto& field = m_fields.field;
        const auto& repo = field.repo();
        const int nlevels = repo.num_active_levels();
        const auto clip_value = m_clip_value;
        for (int lev = 0; lev < nlevels; ++lev) {
            for (amrex::MFIter mfi(field(lev)); mfi.isValid(); ++mfi) {
                const auto& bx = mfi.tilebox();
                const auto& field_arr = field(lev).array(mfi);

                amrex::ParallelFor(
                    bx, [=] AMREX_GPU_DEVICE(int i, int j, int k) noexcept {
                        field_arr(i, j, k) = (field_arr(i, j, k) < 0.0)
                                                 ? clip_value
                                                 : field_arr(i, j, k);
                    });
            }
        }
        m_fields.field.fillpatch(time);
    }

    PDEFields& m_fields;
    amrex::Real m_clip_value{1.0e-8};
};

template <typename Scheme>
struct FieldRegOp<TKE, Scheme>
{
    FieldRegOp(CFDSim& sim_in) : sim(sim_in) {}

    PDEFields operator()(const SimTime& time, const int probtype)
    {
        auto& repo = sim.repo();
        auto fields = create_fields_instance<TKE, Scheme>(time, repo, probtype);

        repo.declare_cc_field(
            TKE::var_name() + "_lhs_src_term", TKE::ndim, 1, 1);

        sim.io_manager().register_io_var(fields.field.name());

        return fields;
    }

    CFDSim& sim;
};

/** Diffusion operator for scalar transport equations
 *  \ingroup pdeop
 */
template <typename Scheme>
struct DiffusionOp<TKE, Scheme> : public DiffSolverIface<typename TKE::MLDiffOp>
{
    static_assert(
        TKE::ndim == 1, "DiffusionOp invoked for non-scalar TKE type");
    static_assert(
        std::is_same<typename TKE::MLDiffOp, amrex::MLABecLaplacian>::value,
        "Invalid linear operator for scalar diffusion operator");

    DiffusionOp(PDEFields& fields, const bool has_overset)
        : DiffSolverIface<typename TKE::MLDiffOp>(fields, has_overset)
        , m_lhs_src_term(
              fields.repo.get_field(TKE::var_name() + "_lhs_src_term"))
    {
        this->m_solver->setDomainBC(
            diffusion::get_diffuse_scalar_bc(
                this->m_pdefields.field, amrex::Orientation::low),
            diffusion::get_diffuse_scalar_bc(
                this->m_pdefields.field, amrex::Orientation::high));
        this->m_applier->setDomainBC(
            diffusion::get_diffuse_scalar_bc(
                this->m_pdefields.field, amrex::Orientation::low),
            diffusion::get_diffuse_scalar_bc(
                this->m_pdefields.field, amrex::Orientation::high));

        m_lhs_src_term.setVal(0.0);
    }

    //! Computes the diffusion term that goes in the RHS
    void compute_diff_term(const FieldState fstate)
    {
        this->setup_operator(*this->m_applier, 0.0, -1.0, fstate);

        auto tau_state = std::is_same<Scheme, fvm::Godunov>::value
                             ? FieldState::New
                             : fstate;
        amrex::MLMG mlmg(*this->m_applier);
        mlmg.apply(
            this->m_pdefields.diff_term.state(tau_state).vec_ptrs(),
            this->m_pdefields.field.vec_ptrs());
    }

    void set_acoeffs(typename TKE::MLDiffOp& linop, const FieldState fstate)
    {
        BL_PROFILE("amr-wind::pde::set_acoeffs");
        auto& repo = m_pdefields.repo;

        const int nlevels = repo.num_active_levels();
        auto& density = m_density.state(fstate);
        auto lhs_total = repo.create_scratch_field(1, 1);
        field_ops::lincomb(
            *lhs_total, 1.0, m_lhs_src_term, 0, 1.0, density, 0, 0, 1, 1);

        for (int lev = 0; lev < nlevels; ++lev) {
            linop.setACoeffs(lev, (*lhs_total)(lev));
        }
    }

    Field& m_lhs_src_term;
};

} // namespace pde
} // namespace amr_wind

#endif /* TKE_OPS_H */
